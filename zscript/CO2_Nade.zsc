// ------------------------------------------------------------
// CO2 Grenade
//
//	Experimental grenade for extinguishing big fires. -Slogstin
// ------------------------------------------------------------
const HDLD_CO2NADE="CO2";
const ENC_CO2GRENADE=ENC_FRAG*1.2;

class HDCO2Grenades:HDGrenadethrower{
	default{
		weapon.selectionorder 1020;
		weapon.slotpriority 1;
		weapon.slotnumber 0;
		tag "CO2-Grenade";
		hdgrenadethrower.ammotype "HDCO2GrenadeAmmo";
		hdgrenadethrower.throwtype "HDCO2GrenadeThrown";
		hdgrenadethrower.spoontype "HDCO2GrenadeSpoon";
		hdgrenadethrower.wiretype "CO2TripwireFrag";
		inventory.icon "CO22A0";
	}

	override string gethelptext(){
		if(weaponstatus[0]&FRAGF_SPOONOFF)return
		WEPHELP_FIRE.."  Wind up, release to throw\n(\cxSTOP READING AND DO THIS"..WEPHELP_RGCOL..")";
		return
		WEPHELP_FIRE.."  Pull pin/wind up (release to throw)\n"
		..WEPHELP_ALTFIRE.."  Pull pin, again to drop spoon\n"
		..WEPHELP_RELOAD.."  Abort/replace pin\n"
		..WEPHELP_ZOOM.."  Start planting tripwire traps"
		;
	}
	
	override void DoEffect(){
		if(weaponstatus[0]&FRAGF_SPOONOFF){
			weaponstatus[FRAGS_TIMER]++;
			if(
				owner.health<1
				||weaponstatus[FRAGS_TIMER]>70
			)TossGrenade(true);
		}else if(
			weaponstatus[0]&FRAGF_INHAND
			&&weaponstatus[0]&FRAGF_PINOUT
			&&owner.player.cmd.buttons&BT_ATTACK
			&&owner.player.cmd.buttons&BT_ALTFIRE
			&&!(owner.player.oldbuttons&BT_ALTFIRE)
		){
			StartCooking();
		}

		if(
			owner.player.cmd.buttons&(BT_ATTACK|BT_ALTFIRE)
		)weaponstatus[FRAGS_HOLDINGFIRE]=min(weaponstatus[FRAGS_HOLDINGFIRE]+1,12);
		else weaponstatus[FRAGS_HOLDINGFIRE]=0;

		super.doeffect();
	}
	
	override string,double getpickupsprite(){return "CO22A0",0.7;}
	override string GetStatusIcon(){
		return (weaponstatus[0]&FRAGF_SPOONOFF)?"CO23A0":(weaponstatus[0]&FRAGF_PINOUT)?"CO22B0":"CO22A0";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let statusicon=GetStatusIcon();
		if(sb.hudlevel==1){
			sb.drawimage(
				statusicon,
				(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6)
			);
			sb.drawnum(hpl.countinv(grenadeammotype),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDCO2GrenadeAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_FRAG)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(70-timer,70,posy:-15,alwaysprecise:true);
		}

		//draw the item and guide lines
		if(
			!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)
			||level.time&1
		)sb.drawimage(statusicon,(0,30+(hdw.weaponstatus[FRAGS_HOLDINGFIRE]<<2))+hpl.wepbob,
			sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			alpha:(hdw.weaponstatus[0]&FRAGF_INHAND)||hpl.countinv("HDCO2GrenadeAmmo")?1.:0.3,
			scale:(1.2,1.2)
		);
		if(hdw.weaponstatus[FRAGS_FORCE]>0)for(int i=hdw.weaponstatus[FRAGS_FORCE];i>0;i--){
			if(i&(1|2|4))continue;
			sb.drawrect(25,-30-(i<<1),8,0.5);
			sb.drawrect(-25,-30-(i<<1),-8,0.5);
		}
	}
	
	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDCO2GrenadeAmmo",1);
	}
	
	states
	{
		deselectinstant:
			TNT1 A -1 A_TakeInventory("HDCO2Grenades", 1);
			stop;
	}
}

class CO2TripwireFrag:Tripwire{
	default{
		weapon.selectionorder 1021;
		tripwire.ammotype "HDCO2GrenadeAmmo";
		tripwire.throwtype "CO2TrippingFrag";
		tripwire.spoontype "HDCO2GrenadeSpoon";
		tripwire.weptype "HDCO2Grenades";
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("CO22A0",(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.7,0.7));
			sb.drawnum(hpl.countinv("HDCO2GrenadeAmmo"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDCO2GrenadeAmmo"),
			(ENC_FRAG/HDCONST_MAXPOCKETSPACE)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(70-timer,70,posy:-15,alwaysprecise:true);
		}
	}
}

class HDCO2Grenade:HDFragGrenade{
	default{
		+ROLLSPRITE
		+ROLLCENTER
		scale 0.25;
		obituary "%o was smoked by %k.";
		hdfraggrenade.rollertype "HDCO2GrenadeRoller";
	}
	states
	{
	spawn:
		CO23 ABCDEFGH 2 A_SetRoll(frandom(-15.5, 15.5));
		loop;
	}
}

class CO2TrippingFrag:TrippingGrenade{
	default{
		//$Category "Misc/Hideous Destructor/Traps"
		//$Title "Tripwire Grenade"
		//$Sprite "FRAGA0"

		scale 0.25;
		trippinggrenade.rollertype "HDCO2GrenadeRoller";
		trippinggrenade.spoontype "HDCO2GrenadeSpoon";
		trippinggrenade.droptype "HDCO2GrenadeAmmo";
		hdupk.pickuptype "HDCO2GrenadeAmmo";
	}
	override void postbeginplay(){
		super.postbeginplay();
		pickupmessage=getdefaultbytype("HDCO2GrenadeAmmo").pickupmessage();
	}
	states{
	spawn:
		CO22 A 1 nodelay A_TrackStuckHeight();
		wait;
	}
}

class HDCO2GrenadeAmmo:HDAmmo{
	default{
		//+forcexybillboard
		inventory.icon "CO22A0";
		inventory.amount 1;
		scale 0.25;
		inventory.maxamount 50;
		inventory.pickupmessage "Picked up a CO2-Grenade.";
		inventory.pickupsound "weapons/pocket";
		tag "CO2-Grenades";
		hdpickup.refid HDLD_CO2NADE;
		hdpickup.bulk ENC_CO2GRENADE;
		+INVENTORY.KEEPDEPLETED
	}
	override bool IsUsed(){return true;}
	override void AttachToOwner(Actor user)
	{
		user.GiveInventory("HDCO2Grenades", 1);
		super.AttachToOwner(user);
	}
	override void DetachFromOwner()
	{
		if(!(owner.player.ReadyWeapon is "HDCO2Grenades"))
		{
			TakeInventory("HDCO2Grenades", 1);
		}
		super.DetachFromOwner();
	}
	states{
	spawn:
		CO22 A -1;stop;
	}
}

class HDCO2GrenadeP:HDUPK{
	default{
		//+forceybillboard
		scale 0.25;height 3;radius 3;
		hdupk.amount 1;
		hdupk.pickuptype "HDCO2GrenadeAmmo";
		hdupk.pickupmessage "Picked up a CO2-Grenade.";
		hdupk.pickupsound "weapons/rifleclick2";
		stamina 1;
	}
	override void postbeginplay(){
		super.postbeginplay();
		pickupmessage=getdefaultbytype(pickuptype).pickupmessage();
	}
	states{
	spawn:
		CO22 A -1;stop;
	}
}

class HDCO2GrenadePickup:HDCO2GrenadeP{
	override void postbeginplay(){
		super.postbeginplay();
		A_SpawnItemEx("HDCO2GrenadeP",-4,0,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("HDCO2GrenadeP",-4,4,flags:SXF_NOCHECKPOSITION);
		A_SpawnItemEx("HDCO2GrenadeP",0,4,flags:SXF_NOCHECKPOSITION);
//		A_SpawnItemEx("HDCO2GrenadeP",4,0,flags:SXF_NOCHECKPOSITION);
//		A_SpawnItemEx("HDCO2GrenadeP",4,4,flags:SXF_NOCHECKPOSITION);
	}
}


class HDCO2GrenadeSpoon:HDDebris{
	default{
		scale 0.25;bouncefactor 0.6;
		bouncesound "misc/casing4";
	}
	override void postbeginplay(){
		super.postbeginplay();
		A_StartSound("weapons/grenopen",CHAN_VOICE);
	}
	states{
	spawn:
		CO22 C 2{roll+=40;}wait;
	death:
		CO22 C -1;
	}
}


class HDCO2GrenadeRoller:HDFragGrenadeRoller{
	//int fuze;
	int gasamount;
	int gotkicked;
	default{
			bouncetype "doom";bouncesound "misc/fragknock";
		radius 2;height 2;damagetype "none";
		scale 0.25;
		obituary "%o was gassed by %k.";
		radiusdamagefactor 0.04;pushfactor 1.4;maxstepheight 2;
		mass 42;
	}
	
	override bool used(actor user){
		angle=user.angle;
		A_StartSound(bouncesound);
		if(hdplayerpawn(user)&&hdplayerpawn(user).incapacitated)A_ChangeVelocity(4,0,1,CVF_RELATIVE);
		else A_ChangeVelocity(12,0,4,CVF_RELATIVE);
		
		if(gasamount>=100&&gotkicked<=0)
		{gotkicked++;actor balls=spawn("HDCO2Puff",self.pos-(frandom(-4,4),0,frandom(-4,4)));
		A_StartSound("weapons/grenade/co2/end",CHAN_6,CHANF_OVERLAP,0.25
		,pitch:frandom(1.75,2.25));HDMobAI.Frighten(self,128);}
		return true;
	}
	
	states{
	
	spawn:
		CO21 A 0 nodelay{
			HDMobAI.Frighten(self,512);
		}
	spawn2:
		#### AAA 2{
			if(abs(vel.z-keeprolling.z)>10)A_StartSound("misc/fragknock",CHAN_BODY);
			else if(floorz>=pos.z)A_StartSound("misc/fragroll");
			keeprolling=vel;
			if(abs(vel.x)<0.4 && abs(vel.y)<0.4) setstatelabel("death");
		}loop;
	bounce:
		---- A 0{
			bmissile=false;
			vel*=0.2;
		}goto spawn2;
	death:
		---- A 2{
			if(abs(vel.z-keeprolling.z)>3){
				A_StartSound("misc/fragknock",CHAN_BODY);
				keeprolling=vel;
			}
			if(abs(vel.x)>0.4 || abs(vel.y)>0.4) setstatelabel("spawn");
		}wait;
		
	nomore:
		---- A 0 A_StopSound(CHAN_WEAPON);
		/*---- A 1 {
		bsolid=false;bpushable=false;bmissile=false;bnointeraction=true;bshootable=false;
		}*/
		---- A 1 A_Fadeout(0.01);
		loop;
	}
	override void tick(){
	
		if(fuze>70){
			keeprolling=vel;
			hdactor.tick();
		}

		if(isfrozen())return;
		else if(bnointeraction){
			//nexttic
			if(CheckNoDelay()){
				if(tics>0)tics--;  
				while(!tics){
					if(!SetState(CurState.NextState)){
						return;
					}
				}
			}
			return;
		}else{
			fuze++;
			if(fuze>=70){
				gasamount++;
			if(gasamount==1){A_StartSound("weapons/grenade/co2/start",CHAN_7,CHANF_OVERLAP,0.95);}
			if(gasamount>=1&&gasamount<=245){actor xpl=spawn("HDCO2Puff",self.pos-(frandom(-8,8),0,frandom(-8,8)));
				A_StartSound("weapons/grenade/co2/end",CHAN_6,CHANF_OVERLAP,frandom(0.5,0.85)
				,pitch:frandom(0.75,1.25),starttime:frandom(0,3));HDMobAI.Frighten(self,1024);}
			
			//if(gasamount>=1&&gasamount<=851){
				//A_Recoil(frandom(-0.95,0.1));A_SetAngle(angle+frandom(-45,45),SPF_INTERPOLATE);}
				//}
				
				if(CheckNoDelay()){
					if(tics>0)tics--;  
					while(!tics){
						if(!SetState(CurState.NextState)){
							return;
						}
					}
				}
				return;
			}else hdactor.tick();
		}
	}
}

class HDCO2GrenadeThrown:HDFragGrenade{

	int gasamount;
	
	default{
		+ROLLSPRITE
		+ROLLCENTER
		scale 0.25;
		obituary "%o was fire.";
		hdfraggrenade.rollertype "HDCO2GrenadeRoller";
		mass 42;
	}
	
	override void tick(){ //not redefining this causes a crash
		ClearInterpolation();
		if(isfrozen())return;
		if(!bmissile){
			hdactor.tick();return;
		}else if(fuze<70){
			fuze++;
			keeprolling=vel;
			hdactor.tick(); //this took me a week to figure out
							//because super.tick crashes the game
		}else{
			if(inthesky){
				A_SpawnChunksFrags();
				destroy();return;
			}
			/*let tgr=HDCO2GrenadeRoller(spawn(rollertype,pos,ALLOW_REPLACE));
			tgr.target=self.target;tgr.master=self.master;tgr.vel=self.vel;
			tgr.fuze=fuze;
			destroy();return;*/
			
			keeprolling=vel;
			hdactor.tick();
			
			gasamount++;
			if(gasamount==1){A_StartSound("weapons/grenade/co2/start",CHAN_7,CHANF_OVERLAP,0.95);}
			if(gasamount>=1&&gasamount<=245){actor xpl=spawn("HDCO2Puff",self.pos-(frandom(-4,4),0,frandom(-4,4)));
				A_StartSound("weapons/grenade/co2/end",CHAN_6,CHANF_OVERLAP,frandom(0.5,0.85)
				,pitch:frandom(0.75,1.25),starttime:frandom(0,3));HDMobAI.Frighten(self,1024);}
			if(gasamount>=1&&gasamount<=201){
				A_Recoil(-0.005);A_SetAngle(angle+1,SPF_INTERPOLATE);}
		}
	}
	
	states
	{
	spawn:
		CO23 ABCDEFGH 2 A_SetRoll(frandom(-15.5, 15.5));
		loop;
		
	death:
		TNT1 A 2{
			bmissile=false;
			let tgr=HDCO2GrenadeRoller(spawn(rollertype,self.pos,ALLOW_REPLACE));
			if(!tgr)return;
			tgr.target=self.target;tgr.master=self.master;
			tgr.fuze=self.fuze;
			tgr.gasamount=self.gasamount;
			tgr.vel=self.keeprolling;
			tgr.keeprolling=self.keeprolling;
			tgr.A_StartSound("misc/fragknock",CHAN_BODY);
			HDMobAI.Frighten(tgr,512);
		}stop;
	}
}



class HDCO2Puff:HDPuff{
	default{
		obituary "%o was fire.";
		scale 0.75;gravity 0.4;alpha 0.5; //0.7
		hdpuff.fadeafter 12000;
		hdpuff.decel 0.96;
		hdpuff.fade 0.95; //0.96
		hdpuff.grow 0.09;
		hdpuff.minalpha 0.003;
		BounceCount 1;
		BounceFactor 5;
		Height 4;
		Radius 3;
		-NOCLIP
		+THRUACTORS
		+BOUNCEONFLOORS +BOUNCEONCEILINGS +BOUNCEONWALLS
		//renderstyle "add";
	}
	
	// For the UAS resperator support, integrated by Mohl
	service RespStatus;
	bool IsPlayerUsingRespirator(HDPlayerPawn ppp){
		// prematurely returns if ppp is not a player pointer, 
		// or if the service is not available. 
		if(!ppp || !respstatus)return false;
		// returns the status of the resperator. 
		return int(RespStatus.GetInt("IsWorn", objectArg:ppp));
	}
	
	override void postbeginplay(){
		HDActor.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		grow*=scale.x;
		vel.z+=startvelz;
		grav=getgravity();

		
		// Looks for a pointer to respstatus,
		// this does nothing if respstatus doesn't exist. 
		ServiceIterator i = ServiceIterator.Find("UaS_RespiratorStatus");
		while((respstatus = i.next()) && !respstatus){};
		
	}
	
	action void A_PoisonAoE(double aoeRadius, int damage) {

				For(let ccc = BlockThingsIterator.Create(self,aoeRadius); ccc.Next();){
				If(!ccc.thing||Distance3D(ccc.thing)>aoeRadius||!ccc.thing.CheckSight(self)){Continue;}
				
				if (ccc.thing.GetClassName() == 'FlyingSkull')
				{
					ccc.thing.DamageMobj(self, self, 200, 'Normal');
					continue;
				}
				
	/*			//this shit has caused me a headache
				//thank you renegade4339 for solving this issue
				let plr = HDPlayerPawn(ccc.thing);
				let mob = HDMobBase(ccc.thing);
				
				If(ccc.thing.bISMONSTER&&ccc.thing.health>0)
				{
					let mob = HDMobBase(ccc.thing);
				
					If(ccc.thing is "HDMobBase")
					{
						//special cases for when a mob should be resistant to gas
						if (!ccc.thing.countinv("WornRadsuit"))
						{
						target=mob;
						if(mob.stunned<=10)mob.stunned+=damage;	
						}
					}
				}
				
				Else If(ccc.thing is "HDPlayerPawn"&&ccc.thing.health>0)
				{
				
					if (!ccc.thing.countinv("WornRadsuit"))
					{
						target=plr;
						//if(random(0,4))plr.A_Pain();
						if(plr.stunned<=10){plr.stunned+=damage;}
						if(plr.fatigue<=2){plr.fatigue++;}
						plr.A_SetBlend("00 00 00",0.3,64,"00 00 00",0);
					}
				}*/
				
		}
	}

	states{
	spawn:
		GASW AABB 1 
				A_ChangeVelocity(
					frandom(-0.1,0.1),frandom(-0.1,0.1),
					0.95,
					CVF_RELATIVE
				);
		GASW CDEEEFF 1 {
		A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		A_PoisonAoE(128,1);
		A_ChangeVelocity(
					frandom(-1,1),frandom(-1,1),
					0.21,
					CVF_RELATIVE
				);}
		GASW FGGG 1 {
		A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		A_PoisonAoE(128,1);
		A_ChangeVelocity(
					frandom(-3.9,3.9),frandom(-3.9,3.9),
					frandom(-1.9,1.9),
					CVF_RELATIVE
				);}
		GASW HHH 1 {
		A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		A_PoisonAoE(128,1);
		A_ChangeVelocity(
					frandom(-2.9,2.9),frandom(-2.9,2.9),
					frandom(-0.9,0.9),
					CVF_RELATIVE
				);}
	hurt1:
		GASW FFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJ 1 
		{A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		A_PoisonAoE(128,1);
		//		A_ChangeVelocity(
		//			frandom(-1.9,1.9),frandom(-1.5,1.5),
		//			frandom(-1.9,1.9),
		//			CVF_RELATIVE
		//		);
		
				A_ChangeVelocity(
					frandom(-0.9,0.9),frandom(-0.9,0.9),
					frandom(-0.9,0.9),
					CVF_RELATIVE
				);}
	hurtloop:
		GASW FFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJ 1 
		{A_RadiusGive("HDFireEnder",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,5);
		A_RadiusGive("HDFireDouse",110,RGF_PLAYERS|RGF_GIVESELF|RGF_MONSTERS|RGF_OBJECTS|RGF_VOODOO|RGF_CORPSES|RGF_KILLED,20);
		A_PoisonAoE(128,1);
		//		A_ChangeVelocity(
		//			frandom(-1.9,1.9),frandom(-1.5,1.5),
		//			frandom(-1.9,1.9),
		//			CVF_RELATIVE
		//		);
		
				A_ChangeVelocity(
					frandom(-0.2,0.2),frandom(-0.2,0.2),
					frandom(-0.2,0.2),
					CVF_RELATIVE
				);}
		loop;
	}
}